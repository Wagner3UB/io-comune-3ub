# Inspired by
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#making-docker-in-docker-builds-faster-with-docker-layer-caching
image: docker:20.10.11

stages:
  - upgrade
  #- build
  #- test
  - release
  - tag
  - deploy

variables:
  # When using dind service, we need to instruct docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket.
  DOCKER_HOST: tcp://docker:2376
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  # If you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: '/certs'
  # These are usually specified by the entrypoint, however the
  # Kubernetes executor doesn't run entrypoints
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4125
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: '$DOCKER_TLS_CERTDIR/client'
  DOCKER_BUILDKIT: 1
  #
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:test
  CONTAINER_TAG_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  CONTAINER_LATEST_IMAGE: $CI_REGISTRY_IMAGE:latest
  GITLAB_TOKEN: $CI_JOB_TOKEN

services:
  - docker:20.10.11-dind

before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin

upgrade:
  cache:
    paths:
      - node_modules/
  stage: upgrade
  image: registry.gitlab.com/redturtle/io-comune/io-comune-updater:latest
  before_script:
    - url_host=$(git remote get-url origin | sed -e "s/https:\/\/gitlab-ci-token:.*@//g")
    - git remote set-url origin "https://gitlab-ci-token:${CI_TAG_UPLOAD_TOKEN}@${url_host}"
    - git config user.name GitlabCI
    - git config user.email sviluppo@redturtle.it
    - git config push.default simple
    - git checkout main
    - yarn config set network-timeout 600000 -g
  script:
    - tag_name=$(curl -s https://api.github.com/repos/RedTurtle/design-volto-theme/releases/latest | jq -r '.tag_name')
    - yarn install
    - yarn add -W redturtle/design-volto-theme#$tag_name
    - git add package.json yarn.lock
    #- msg=$(echo 'upgrade dvt#'$tag_name)
    #- git commit -m $msg
    - if [[ $(git status --porcelain) ]]; then git commit -m 'upgrade dvt' && git push; else echo "No changes. Skipping commit."; fi
  only:
    - pipelines

#build:
#  stage: build
#  needs: []
#  script:
#    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CONTAINER_TEST_IMAGE -t $CONTAINER_TEST_IMAGE .
#    - docker push $CONTAINER_TEST_IMAGE
#  only:
#    - tags
#    # - merge_requests
#    - main
#  except:
#    - pipelines

#test:
#stage: test
#script:
#- docker pull $CONTAINER_TEST_IMAGE
#- docker run -e CI $CONTAINER_TEST_IMAGE yarn test
#only:
#- tags
#- merge_requests
#- main
#except:
#- pipelines

release-image:
  stage: release
  needs: []
  script:
    # con buildkit questo non serve piÃ¹
    # - docker pull $CONTAINER_LATEST_IMAGE || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CONTAINER_LATEST_IMAGE --pull -t $CONTAINER_LATEST_IMAGE .
    - docker push $CONTAINER_LATEST_IMAGE
  only:
    - tags
    - main
  except:
    - pipelines

tag-image:
  stage: tag
  script:
    - docker pull $CONTAINER_LATEST_IMAGE
    - docker tag $CONTAINER_LATEST_IMAGE $CONTAINER_TAG_IMAGE
    - docker push $CONTAINER_TAG_IMAGE
  only:
    - tags
  except:
    - pipelines

deploy-staging:
  stage: deploy
  script:
    - export RANCHER_NAMESPACE=$RANCHER_NAMESPACE_STAGING
    - export CONTAINER_IMAGE=$CONTAINER_LATEST_IMAGE
    - env | grep '^RANCHER_' > .env
    - env | grep '^CONTAINER_' >> .env
    - env | grep '^CI' >> .env
    - env | grep '^SLACK' >> .env
    - docker pull $CONTAINER_LATEST_IMAGE
    - docker run --env-file=.env -e DOCKER_ENV_CI_SERVER_TLS_CA_FILE $CONTAINER_LATEST_IMAGE yarn deploy
  only:
    - main
  except:
    - pipelines
#deploy-prod:
#stage: deploy
#script:
#- export RANCHER_NAMESPACE=$RANCHER_NAMESPACE_PROD
#- export CONTAINER_IMAGE=$CONTAINER_TAG_IMAGE
#- env | grep '^RANCHER_' > .env
#- env | grep '^CONTAINER_' >> .env
#- env | grep '^CI' >> .env
#- env | grep '^SLACK' >> .env
#- docker pull $CONTAINER_LATEST_IMAGE
#- docker run --env-file=.env -e DOCKER_ENV_CI_SERVER_TLS_CA_FILE $CONTAINER_LATEST_IMAGE yarn deploy
#only:
#- tags
#except:
#- pipelines
